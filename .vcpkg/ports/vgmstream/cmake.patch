diff --git a/CMakeLists.txt b/CMakeLists.txt
index d719e16e..b8121a13 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,5 @@
 cmake_minimum_required(VERSION 3.6)
+cmake_policy(SET CMP0091 NEW)
 project(vgmstream NONE)
 
 if(CMAKE_SYSTEM_NAME MATCHES Darwin)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index f09d3eed..02750d86 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -66,12 +66,37 @@ if(NOT EMSCRIPTEN)
 		PREFIX ""
 		OUTPUT_NAME "libvgmstream"
 	)
-	
+
 	if(USE_FFMPEG AND FFMPEG_COMPILE)
 		add_dependencies(libvgmstream_shared avcodec)
 	endif()
-	
+
 	setup_target(libvgmstream_shared TRUE)
-	
+
 	target_include_directories(libvgmstream_shared PRIVATE ${libvgmstream_includes})
 endif()
+
+if(MSVC)
+	target_compile_definitions(libvgmstream PRIVATE "USE_ALLOCA")
+	target_compile_options(libvgmstream PRIVATE /DVGM_DEBUG_OUTPUT)
+endif()
+
+# Install library
+install(TARGETS libvgmstream
+  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+)
+
+if(NOT SKIP_INSTALL_HEADERS)
+	# Install headers
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/vgmstream.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/plugins.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/util.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/util.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/util/log.h DESTINATION include/libvgmstream/util )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/streamtypes.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/streamfile.h DESTINATION include/libvgmstream )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/coding/g72x_state.h DESTINATION include/libvgmstream/coding )
+	install( FILES ${CMAKE_CURRENT_SOURCE_DIR}/coding/nwa_decoder.h DESTINATION include/libvgmstream/coding )
+endif()
\ No newline at end of file
diff --git a/src/coding/coding.h b/src/coding/coding.h
index eac0cd88..e132f791 100644
--- a/src/coding/coding.h
+++ b/src/coding/coding.h
@@ -430,6 +430,15 @@ void seek_vorbis_custom(VGMSTREAM* vgmstream, int32_t num_sample);
 void free_vorbis_custom(vorbis_custom_codec_data* data);
 #endif
 
+typedef struct {
+    int version;
+    int layer;
+    int bit_rate;
+    int sample_rate;
+    int frame_samples;
+    int frame_size; /* bytes */
+    int channels;
+} mpeg_frame_info;
 
 #ifdef VGM_USE_MPEG
 /* mpeg_decoder */
@@ -482,16 +491,6 @@ void free_mpeg(mpeg_codec_data* data);
 int mpeg_get_sample_rate(mpeg_codec_data* data);
 long mpeg_bytes_to_samples(long bytes, const mpeg_codec_data* data);
 
-typedef struct {
-    int version;
-    int layer;
-    int bit_rate;
-    int sample_rate;
-    int frame_samples;
-    int frame_size; /* bytes */
-    int channels;
-} mpeg_frame_info;
-
 int mpeg_get_frame_info(STREAMFILE* sf, off_t offset, mpeg_frame_info* info);
 #endif
 
diff --git a/src/streamfile.c b/src/streamfile.c
index 0e6cb01e..d2d7b666 100644
--- a/src/streamfile.c
+++ b/src/streamfile.c
@@ -263,8 +263,10 @@ static STREAMFILE* open_stdio_streamfile_buffer_by_file(FILE* infile, const char
     this_sf->buf = buf;
 
     this_sf->name_len = strlen(filename);
-    if (this_sf->name_len >= sizeof(this_sf->name))
+    if (this_sf->name_len >= sizeof(this_sf->name)) {
+        vgm_logi("STREAMFILE: filename length is longer than sizeof(this_sf->name).\n");
         goto fail;
+    }
     memcpy(this_sf->name, filename, this_sf->name_len);
     this_sf->name[this_sf->name_len] = '\0';
 
@@ -304,6 +306,7 @@ static STREAMFILE* open_stdio_streamfile_buffer_by_file(FILE* infile, const char
     return &this_sf->vt;
 
 fail:
+    vgm_logi("STREAMFILE: could not allocate stream because of memory exhaustion.\n");
     free(buf);
     free(this_sf);
     return NULL;
